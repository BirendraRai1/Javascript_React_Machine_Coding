Q1>array of n positive integer.Find maximum value of k
such that all subArrays of length k, sum<=B

Ans>Brute force //TimeComplexity O(n*k)
function subArrayLength(arr,B){
	let ans = 0
	for(let k=1;k<=arr.length;k++){
    if(checkSubArraySum(arr,k,B))
       ans = k
    else
      return ans
	}
}

function checkSubArraySum(arr,k,B){
	let sum =0
  for(let i=0;i<k;i++)
  	sum+=arr[i]
  if(sum>B){
  
  	return false
  }
  	
  for(let j=k,i=1;j<arr.length;j++,i++){
  	sum+=arr[j]-arr[i-1]
    if(sum>B)
    	return false
  }
  return true
}

let arr = [3,2,5,4,6,3,7,20]

let B = 20

console.log("ans ",subArrayLength(arr,B))

Q2>Longest Substring Without Repeating Characters
sol>let lengthOfLongestSubstring = function(s) {
    let n = s.length
    let ans = 0
    let l=1
    let r=n
    while(l<=r){
        let mid = parseInt((l+r)/2)
        if(checkUnique(s,mid)){
            ans = mid
            l= mid+1
        }
        else{
            r=mid-1
        }
    }
  return ans
};

function checkUnique(s,mid){
    let n = s.length,
        i=0,
        j=0,
        count = new Array(256).fill(0)
        distinctChar = 0
    //counting distinctChar in first window
    while(j<mid){
        count[s.charCodeAt(j)]++
        if(count[s.charCodeAt(j)]==1)
            distinctChar++
        j++
    }
    if(distinctChar==mid)
        return true
        i=1
        j=mid
    while(i<=n-mid && j<n){
        count[s.charCodeAt(i-1)]--//deleting the count of character going out of window
        if(count[s.charCodeAt(i-1)]==0)
            distinctChar--
        count[s.charCodeAt(j)]++//adding the count of character coming inside the window
        if(count[s.charCodeAt(j)]==1)
            distinctChar++
        if(distinctChar==mid)
            return true
        i++
        j++
    }
    return false
}